class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int m = queries.length;
        
        int left = 0, right = m;
        int answer = -1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (canBeZero(nums, queries, mid)) {
                answer = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return answer;
    }
    
    private boolean canBeZero(int[] nums, int[][] queries, int k) {
        int n = nums.length;
        int[] decrease = new int[n + 2]; 

        for (int i = 0; i < k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int val = queries[i][2];

            decrease[l] += val;
            decrease[r + 1] -= val;
        }

        int[] actualDecrease = new int[n];
        int prefix = 0;

        for (int i = 0; i < n; i++) {
            prefix += decrease[i];
            actualDecrease[i] = prefix;
        }

        for (int i = 0; i < n; i++) {
            if (actualDecrease[i] < nums[i]) return false;
        }

        return true;
    }
}
